}
count <- count[2:16]
nh$GroupCode <- count
nh_nolabel <- nh[,4:44]
View(nh_nolabel)
View(nh_nolabel)
m1 <- lm(GroupCode ~ ABR_thresh_100, data = nh_nolabel)
m1 <- lm(GroupCode ~ ABR_thresh_1000, data = nh_nolabel)
summary(m1)
m1 <- lm(GroupCode ~ ABR_thresh_1000 + ABR_thresh_2000 + RAM_amplitude_sum, data = nh_nolabel)
summary(m1)
m1 <- lm(GroupCode ~ RAM_amplitude_sum, data = nh_nolabel)
summary(m1)
nh <- subset(nh_na, Status == 2)
nh0 <- subset(nh_na, Status == 0)
View(nh0)
View(nh0)
nh0 <- nh0[-7,:]
nh0 <- nh0[!7,:]
nh0 <- nh0[!nh0[7,:]]
nh0 <- nh0[~nh0[7,:]]
nh <- nh[-9]
nh_na <- na.omit(nh)
nh <- subset(nh_na, Status == 2
nh0 <- subset(nh_na, Status == 0)
ndiff <- nh0 - nh
View(nh0)
View(nh0)
c(1:2, 4:16)
nh0 <- nh0[c(1:2, 4:16)]
ndiff <- nh0 - nh
View(nh0)
View(nh0)
nh0 <- subset(nh_na, Status == 0)
nh0 <- nh0[c(1:2, 4:16),:]
nh0 <- nh0[c(1:2, 4:16),]
View(nh0)
View(nh0)
nh0 <- subset(nh_na, Status == 0)
nh <- subset(dat, Group == 'CA' | Group == 'TTS')
nh <- nh[-9]
nh_na <- na.omit(nh)
nh <- subset(nh_na, Status == 2)
nh <- subset(nh_na, Status == 2)
nh0 <- subset(nh_na, Status == 0)
nh0 <- nh0[c(1:2, 4:16),]
View(nh0)
ndiff <- nh0 - nh
View(ndiff)
ndiff$Group <- nh$Group
View(ndiff)
count = 0
for (i in 1:nrow(nh)){
if (nh$Group[i] == 'CA') {
count <- c(count, 1)
} else if (nh$Group[i] == 'TTS') {
count <- c(count, 0)
}
}
count <- count[2:16]
nh$GroupCode <- count
ndiff$GroupCode <- count
m1 <- lm(GroupCode ~ RAM_amplitude_sum, data = ndiff)
summary(m1)
m1 <- lm(GroupCode ~ MEMR_threshold, data = ndiff)
summary(m1)
m1 <- lm(GroupCode ~ MEMR_threshold*RAM_amplitude_sum, data = ndiff)
summary(m1)
m1 <- lm(GroupCode ~ MEMR_threshold+RAM_amplitude_sum, data = ndiff)
summary(m1)
m1 <- lm(GroupCode ~ DP_amplitude_2000, data = ndiff)
summary(m1)
m1 <- lm(GroupCode ~ DP_amplitude_2000 + DP_amplitude_4000, data = ndiff)
summary(m1)
View(ndiff)
View(ndiff)
m1 <- lm(DP_amplitude_2000 ~ GroupCode, data = ndiff)
summary(m1)
m1 <- lm(MEMR_threshold ~ GroupCode, data = ndiff)
summary(m1)
m1 <- lm(RAM_amplitude_sum ~ GroupCode, data = ndiff)
summary(m1)
m1 <- lm(RAM_amplitude_sum ~ Group, data = nh)
summary(m1)
m1 <- lm(RAM_amplitude_sum ~ Group, data = ndiff)
summary(m1)
m1 <- lm(MEMR_threshold ~ Group, data = ndiff)
summary(m1)
m1 <- lm(MEMR_threshold ~ Group, data = nh)
summary(m1)
m1 <- lm(MEMR_threshold ~ Group, data = nh)
summary(m1)
m1 <- lm(cbind(MEMR_threshold, DP_amplitude_2000, SF_amplitude_2000) ~ Group, data = nh)
summary(m1)
anova(m1)
m1 <- lm(MEMR_threshold ~ Group, data = nh)
summary(m1)
anova(m1)
head(nh)
nh <- subset(dat, Group == 'CA' | Group == 'TTS')
nh <- nh[-9]
nh_na <- na.omit(nh)
m1 <- lm(MEMR_threshold ~ Group, data = nh_na)
summary(m1)
anova(m1)
m1 <- lm(MEMR_threshold ~ Group*Status, data = nh_na)
summary(m1)
anova(m1)
m1 <- lm(RAM_amplitude_sum ~ Group*Status, data = nh_na)
summary(m1)
anova(m1)
m1 <- lm(DP_amplitude_1000 ~ Group*Status, data = nh_na)
summary(m1)
anova(m1)
m1 <- lm(DP_amplitude_2828 ~ Group*Status, data = nh_na)
summary(m1)
anova(m1)
m1 <- lm(DP_amplitude_4000 ~ Group*Status, data = nh_na)
summary(m1)
anova(m1)
## Example 1, trying to use random rats data
dat <- read.csv("C:\\Users\\saman\\Desktop\\Pitch_Diagnostics_Code\\Profiling\\Processed\\Data_DPOAE_lme.csv")
str(dat)
library(ggplot2)
# factors set for categorical variables
dat$subj <- as.factor(dat$subj)
dat$group <- as.factor(dat$group)
dat$stat <- as.factor(dat$stat)
dat$dBEPL <- as.numeric(dat$dBEPL)
dat <- na.omit(dat)
p <- ggplot(aes(x=stat, y=dBEPL, color=group), data=dat) + geom_boxplot()
p + xlab('Status') + ylab('dB EPL')
m <- lm(dBEPL ~ stat*group + freq , data=dat)
# after you fit a model
summary(m) # will give you more info about what your model has done
Anova(m, test.statistic='F')
# make a model with only frequency so that it can be regressed out
m1 <- lm(dBSPL ~ Frequency, data=dat)
dat$dBSPL_freq2 <- residuals(m1)
# Plot data after regressing out frequency
p <- ggplot(aes(x=OAEtype, y=dBSPL_freq2, color=Group), data=dat) + geom_boxplot()
p + xlab('OAE type') + ylab('Amplitude (dB SPL)')
##
ca_dat <- subset(dat, group=="CA_2wksPost" | group=="TTS_2wksPost")
ca_m <- lm(dBEPL ~ freq*group, data=ca_dat)
summary(ca_m)
m1 <- lm(dBEPL ~ freq, data=ca_dat)
View(ca_dat)
View(ca_dat)
ca_m <- lm(dBEPL ~ freq*group*stat, data=ca_dat)
summary(ca_m)
m1 <- lm(dBEPL ~ freq, data=ca_dat)
## RAM
dat_ram <- read.csv("C:\\Users\\saman\\Desktop\\Pitch_Diagnostics_Code\\Profiling\\Processed\\Data_RAM_lme.csv")
str(dat)
library(ggplot2)
# factors set for categorical variables
dat_ram$subj <- as.factor(dat_ram$subj)
dat_ram$group <- as.factor(dat_ram$group)
dat_ram$stat <- as.factor(dat_ram$stat)
dat_ram$RAM <- as.numeric(dat_ram$RAM)
dat_ram <- na.omit(dat_ram)
p <- ggplot(aes(x=stat, y=RAM, color=group), data=dat_ram) + geom_boxplot()
p + xlab('Status') + ylab('RAM amp')
m <- lm(RAM ~ stat*group, data=dat_ram)
# after you fit a model
summary(m) # will give you more info about what your model has done
Anova(m, test.statistic='F')
dat_ram <- na.omit(dat_ram)
# after you fit a model
summary(m) # will give you more info about what your model has done
m <- lm(RAM ~ stat*group, data=dat_ram)
# after you fit a model
summary(m) # will give you more info about what your model has done
Anova(m, test.statistic='F')
dat <- read.csv("C:\\Users\\saman\\Desktop\\Pitch_Diagnostics_Code\\Profiling\\Processed\\newalldata2.csv")
str(dat)
dat <- read.csv("C:\\Users\\saman\\Desktop\\Pitch_Diagnostics_Code\\Profiling\\Processed\\newalldata2.csv")
str(dat)
dat <- read.csv("C:\\Users\\saman\\Desktop\\Pitch_Diagnostics_Code\\Profiling\\Processed\\newalldata2.csv")
str(dat)
dat <- read.csv("C:\\Users\\saman\\Desktop\\Pitch_Diagnostics_Code\\Profiling\\Processed\\newalldata2.csv")
str(dat)
# factors set for categorical variables
dat$Subject <- as.factor(dat$Subject)
dat$Group <- as.factor(dat$Group)
dat$Status <- as.factor(dat$Status)
dat$Sex <- as.factor(dat$Sex)
m <- lm(MEMR_threshold ~ Group*Sex*Status + DP_amplitude_4000 + ABR_thresh_4000)
m <- lm(MEMR_threshold ~ Group*Sex*Status + DP_amplitude_4000 + ABR_thresh_4000, data = dat)
summary(m)
dat <- na.omit(dat)
m <- lm(MEMR_threshold ~ Group*Sex*Status, data = dat)
summary(m)
m <- lm(MEMR_threshold ~ ABR_thresh_4000, data = dat)
summary(m)
m <- lm(MEMR_threshold ~ ABR_thresh_4000*Group*Status*Sex, data = dat)
summary(m)
m <- lm(RAM_amplitude_sum ~ Group*Status*Sex, data = dat)
summary(m)
ca <- subset(dat, dat$Group == 'CA')
m <- lm(RAM_amplitude_sum ~ Group*Status*Sex, data = ca)
summary(m)
m <- lm(RAM_amplitude_sum ~ Status*Sex, data = ca)
summary(m)
pre <- subset(ca, ca$Status ==0 )
post <- subset(ca, ca$Status == 2)
diff <- pre - post
View(diff)
diff$Sex <- pre$Sex
m <- lm(RAM_amplitude_sum ~ Sex, data = diff)
summary(m)
dat_ram <- read.csv("C:\\Users\\saman\\Desktop\\Pitch_Diagnostics_Code\\Profiling\\Processed\\Data_RAM_lme.csv")
str(dat)
library(ggplot2)
# factors set for categorical variables
dat_ram$subj <- as.factor(dat_ram$subj)
dat_ram$group <- as.factor(dat_ram$group)
dat_ram$stat <- as.factor(dat_ram$stat)
dat_ram$RAM <- as.numeric(dat_ram$RAM)
dat_ram <- na.omit(dat_ram)
p <- ggplot(aes(x=stat, y=RAM, color=group), data=dat_ram) + geom_boxplot()
p + xlab('Status') + ylab('RAM amp')
m <- lm(RAM ~ stat*group, data=dat_ram)
# after you fit a model
summary(m) # will give you more info about what your model has done
Anova(m, test.statistic='F')
## Install Packages
install.packages("tidyverse")
library(tidyverse)
popsize <- read_tsv("./tidyDat/FauchaldEtAl2017/pop_size.csv")
popsize <- read_tsv("./tidyDat/FauchaldEtAl2017/pop_size.csv")
### Question 2
ndvi <- read_tsv("./tidyDat/FauchaldEtAl2017/ndvi.csv")
View(popsize)
# Extract unique Years in ppopsize and order in ascending
years <- select(.data = popsize, Year)
years <- unique(years)
View(years)
years <- sort(years)
# Extract unique Years in ppopsize and order in ascending
years <- select(.data = popsize, Year)
years <- as.array(unique(years))
years
# Extract unique Years in ppopsize and order in ascending
years <- sort(unique(popsize$Year))
years
### Question 2
ndvi <- read_tsv("./tidyDat/FauchaldEtAl2017/ndvi.csv")
# extract row in ndvi with largest NDVI_May
filter(ndvi, max(NDVI_May))
# extract row in ndvi with largest NDVI_May
filter(ndvi, NDVI_May == max(NDVI_May))
View(ndvi)
# list the three years with the largest Pop_Size for Herd called WAH. Perform operationi two ways
top_n(popsize, 3, Pop_Size)
### Question 1 - average Pop_Size for each Herd in popsize
uniqueHerd <- unique(popsize$Herd)
### Question 1 - average Pop_Size for each Herd in popsize
popsize %>% group_by(Herd)
View(popsize)
uniqueHerd <- unique(popsize$Herd)
avg_pop_size <- []     #initialize
#initialize
for (i in uniqueHerd){
avg_pop_size[i] <- mean(filter(popsize, Herd == uniqueHerd))
}
avg_pop_size <- array(0, nrow = length(uniqueHerd), ncol = 1)     #initialize
avg_pop_size <- array(0, dim = length(uniqueHerd))     #initialize
for (i in uniqueHerd){
avg_pop_size[i] <- mean(filter(popsize, Herd == uniqueHerd))
}
length(uniqueHerd))
length(uniqueHerd)
avg_pop_size <- array(0, dim = length(uniqueHerd))     #initialize
for (i in uniqueHerd){
avg_pop_size[i] <- mean(filter(popsize, Herd == uniqueHerd[i]))
}
warnings()
filter(popsize, Herd == uniqueHerd[i])
uniqueHerd[i]
uniqueHerd <- unique(popsize$Herd)
avg_pop_size <- array(0, dim = length(uniqueHerd))     #initialize
for (i in uniqueHerd){
avg_pop_size[i] <- mean(filter(popsize, Herd == i))
}
slice(popsize, Herd == i)
filter(popsize, Herd == i)
avg_pop_size <- array(0, dim = length(uniqueHerd))     #initialize
for (i in uniqueHerd){
selected_rows <- filter(popsize, Herd == i)
avg_pop_size[i] <- mean(selected_rows$Pop_Size)
}
mean(selected_rows$Pop_Size)
uniqueHerd <- unique(popsize$Herd)
avg_pop_size <- array(0, dim = length(uniqueHerd))     #initialize
for (i in uniqueHerd){
selected_rows <- filter(popsize, Herd == i)
avg_pop_size[i] <- mean(selected_rows$Pop_Size)
}
uniqueHerd <- unique(popsize$Herd)
avg_pop_size <- array(0, dim = length(uniqueHerd))     #initialize
for (i in uniqueHerd){
selected_rows <- filter(popsize, Herd == i)
avg_pop_size[i] <- selected_rows %>% summarize(mean_herd = mean(Herd))
}
mean(selected_rows$Herd)
View(selected_rows)
uniqueHerd <- unique(popsize$Herd)
avg_pop_size <- array(0, dim = length(uniqueHerd))     #initialize
for (i in uniqueHerd){
selected_rows <- filter(popsize, Herd == i)
avg_pop_size[i] <- mean(selected_rows$Pop_Size)
}
selected_rows$Pop_Size
mean(selected_rows$Pop_Size)
avg_pop_size <- array(0, dim = length(uniqueHerd))
for (i in uniqueHerd){
selected_rows <- filter(popsize, Herd == i)
avg_pop_size[i] <- mean(selected_rows$Pop_Size)
}
size(uniqueHerd)
length(uniqueHerd)
i = 1
selected_rows <- filter(popsize, Herd == i)
i = uniqueHerd[1]
selected_rows <- filter(popsize, Herd == i)
avg_pop_size <- array(0, dim = length(uniqueHerd))     #initialize
mean(selected_rows$Pop_Size)
avg_pop_size[i] <- mean(selected_rows$Pop_Size)
clear
rm(avg_pop_size)
for (i in uniqueHerd){
selected_rows <- filter(popsize, Herd == i)
avg_pop_size[i] <- mean(selected_rows$Pop_Size)
}
uniqueHerd <- unique(popsize$Herd)
avg_pop_size <- array(0, dim = length(uniqueHerd))     #initialize
for (i in 1:length(uniqueHerd){
uniqueHerd <- unique(popsize$Herd)
avg_pop_size <- array(0, dim = length(uniqueHerd))
for (i in 1:length(uniqueHerd)){
selected_rows <- filter(popsize, Herd == uniqueHerd[i])
avg_pop_size[i] <- mean(selected_rows$Pop_Size)
}
avg_pop_size
for (i in 1:length(uniqueHerd)){
selected_rows <- filter(popsize, Herd == uniqueHerd[i])
avg_pop_size[i,1] <- mean(selected_rows$Pop_Size)
avg_pop_size[i,2] <- uniqueHerd[i]
}
avg_pop_size <- matrix(0, nrow = length(uniqueHerd), ncol=2)     #initialize
for (i in 1:length(uniqueHerd)){
selected_rows <- filter(popsize, Herd == uniqueHerd[i])
avg_pop_size[i,1] <- mean(selected_rows$Pop_Size)
avg_pop_size[i,2] <- uniqueHerd[i]
}
avg_pop_size
View(avg_pop_size)
View(avg_pop_size)
years_2 <- popsize %>%
unique(Year) %>%
sort()
years_2 <- popsize %>%
distinct(Year) %>%
arrange()
View(years_2)
ndvi_stat <- ndvi %>%  group_by(Herd) %>%
summarize(std = sd(Pop_Size)) %>% arrange(Herd)
### Question 2 - Identify the Herd with largest std for NDVI_May
ndvi_stat <- ndvi %>%  group_by(Herd) %>%
summarize(std = sd(NDVI_May)) %>% arrange(Herd)
View(ndvi_stat)
max(ndvi_stat)
max(ndvi_stat$std)
ndvi_stat <- ndvi %>%  group_by(Herd) %>%
summarize(std = sd(NDVI_May)) %>% arrange(std)
View(ndvi_stat)
### Question 2 - Identify the Herd with largest std for NDVI_May
ndvi_stat <- ndvi %>%  group_by(Herd) %>%
summarize(std = sd(NDVI_May)) %>% arrange(std, descending=T)
ndvi_stat[1]
?arrange
ndvi_stat[end]
ndvi_stat[nrow(ndvi_stat)]
ndvi_stat[nrow(ndvi_stat),1]
popsize2 <- popsize %>%
mutate(rel_popsize = Pop_Size/mean(Pop_Size))
popsize2
### Question 1 - average Pop_Size for each Herd in popsize
popsize %>% group_by(Herd) %>%
transmute(meanPS = mean(Pop_Size))
### Question 1 - average Pop_Size for each Herd in popsize
popsize %>% group_by(Herd) %>%
transmute(meanPS = mean(Pop_Size)) %>% unique()
### Question 1 - average Pop_Size for each Herd in popsize
popsize %>% group_by(Herd) %>%
transmute(meanPS = mean(Pop_Size)) %>% unique(Herd)
### Question 1 - average Pop_Size for each Herd in popsize
popsize %>% group_by(Herd) %>%
transmute(meanPS = mean(Pop_Size)) %>% unique()
ndvi %>%  group_by(Herd) %>%
summarize(std = sd(NDVI_May)) %>% max(std)
ndvi %>%  group_by(Herd) %>%
summarize(std = sd(NDVI_May)) %>% max()
ndvi %>%  group_by(Herd) %>%
summarize(std = sd(NDVI_May))
ndvi %>%  group_by(Herd) %>%
summarize(std = sd(NDVI_May)) %>% max(std)
ndvi %>%  group_by(Herd) %>%
summarize(std_may = sd(NDVI_May)) %>% filter(max(std_may))
summarize(std_may = sd(NDVI_May)) %>% filter(std_may == max(std_may)
ndvi %>%  group_by(Herd) %>%
ndvi %>%
group_by(Herd) %>%
summarize(std_may = sd(NDVI_May)) %>%
filter(std_may == max(std_may))
# Load Packages -----------------------------------------------------------
library(tidyverse)
library(ggplot2)
library(patchwork)
# Set Working Directory ---------------------------------------------------
setwd("C:/Users/saman/Desktop/PhD/Coursework/BIOL695_DataScience/DS4B695_FinalProject/")
# Load Data ---------------------------------------------------------------
dat <- read_csv("./finalProjectData.csv")
dat[5:9]
ggplot(data = dat) + aes(x = c(500, 1000, 2000, 4000, 8000), y=dat[5:9], color=Group, shape=Sex) +
geom_point()
abr <- dat[1:9] %>% pivot_longer(cols = 5:9, names_to = "freq", values_to = "threshold" )
ggplot(data = abr) + aes(x = freq, y=threshold, color=Status, shape=Sex) +
geom_point()
dat$Status <- factor(Status)
dat$Status <- as.factor(dat$Status)
abr <- dat[1:9] %>% pivot_longer(cols = 5:9, names_to = "freq", values_to = "threshold" )
ggplot(data = abr) + aes(x = freq, y=threshold, color=Status, shape=Sex) +
geom_point()
abr$freq <- factor(abr$freq, labels=c("500", "1000", "2000", "4000", "8000"))
ggplot(data = abr) + aes(x = freq, y=threshold, color=Status, shape=Sex) +
geom_point()
ggplot(data = abr %>% group_by(Subject)) + aes(x = freq, y=threshold, color=Status, shape=Sex) +
geom_point()
ggplot(data = abr %>% group_by(Subject)) + aes(x = freq, y=threshold, color=Status, shape=Sex) +
geom_line()
dat$Sex <- as.factor(dat$Sex)
abr <- dat[1:9] %>% pivot_longer(cols = 5:9, names_to = "freq", values_to = "threshold" )
abr$freq <- factor(abr$freq, labels=c("500", "1000", "2000", "4000", "8000"))
dat$Group <- as.factor(dat$Group)
dat$Subject <- as.factor(dat$Subject)
abr <- dat[1:9] %>% pivot_longer(cols = 5:9, names_to = "freq", values_to = "threshold" )
abr$freq <- factor(abr$freq, labels=c("500", "1000", "2000", "4000", "8000"))
# Aim 1 -------------------------------------------------------------------
ggplot(data = abr + aes(x = freq, y=threshold, color=Status, shape=Sex) +
ggplot(data = abr + aes(x = freq, y=threshold, color=Status, shape=Sex) +
ggplot(data = abr) + aes(x = freq, y=threshold, color=Status, shape=Sex) +
geom_point() +
ggplot(data = abr) + aes(x = freq, y=threshold, color=Status, shape=Sex) +
geom_point()
geom_line()
ggplot(data = abr) + aes(x = freq, y=threshold, color=Status, shape=Sex) +
geom_point()
ggplot(data = abr %>% group_by(Subject, Status)) + aes(x = freq, y=threshold, color=Status, shape=Sex) +
geom_point()
ggplot(data = abr %>% group_by(Subject, Status)) + aes(x = freq, y=threshold, color=Group, shape=Sex) +
geom_point()
ggplot(data = abr %>% group_by(Subject, Status)) + aes(x = freq, y=threshold, color=Group, shape=Sex) +
geom_smooth()
ggplot(data = abr %>% group_by(Subject, Status)) + aes(x = freq, y=threshold, color=Group, shape=Sex) +
geom_smooth()
ggplot(data = abr %>% group_by(Subject, Status)) + aes(x = freq, y=threshold, color=Group, shape=Sex) +
geom_point()
ggplot(data = abr %>% group_by(Subject, Status)) + aes(x = freq, y=threshold, color=Group, shape=Sex) +
geom_boxplot()
ggplot(data = abr %>% group_by(Status)) + aes(x = freq, y=threshold, color=Group) +
geom_boxplot()
ggplot(data = abr %>% filter(Status==0)) + aes(x = freq, y=threshold, color=Group) +
geom_boxplot()
p2 <- ggplot(data = abr %>% filter(Status==2)) + aes(x = freq, y=threshold, color=Group) +
geom_boxplot()
p1 <- ggplot(data = abr %>% filter(Status==0)) + aes(x = freq, y=threshold, color=Group) +
geom_boxplot()
p2 <- ggplot(data = abr %>% filter(Status==2)) + aes(x = freq, y=threshold, color=Group) +
geom_boxplot()
p1 + p2
p1 <- ggplot(data = abr %>% filter(Group=="TTS")) + aes(x = freq, y=threshold, color=Status) +
geom_boxplot()
p2 <- ggplot(data = abr %>% filter(Group=="CA")) + aes(x = freq, y=threshold, color=Status) +
geom_boxplot()
p1 + p2
p1 / p2
dat$Sex <- factor(dat$Sex, labels = c("Pre", "Post"))
dat$Group <- as.factor(dat$Group)
dat$Subject <- as.factor(dat$Subject)
abr <- dat[1:9] %>% pivot_longer(cols = 5:9, names_to = "freq", values_to = "threshold" )
abr$freq <- factor(abr$freq, labels=c("500", "1000", "2000", "4000", "8000"))
p1 <- ggplot(data = abr %>% filter(Group=="TTS")) + aes(x = freq, y=threshold, color=Status) +
geom_boxplot()
p2 <- ggplot(data = abr %>% filter(Group=="CA")) + aes(x = freq, y=threshold, color=Status) +
geom_boxplot()
p1 / p2
# Load Data ---------------------------------------------------------------
dat <- read_csv("./finalProjectData.csv")
dat$Status <- factor(dat$Status, labels = c("Pre", "Post"))
dat$Sex <- factor(dat$Sex)
dat$Group <- as.factor(dat$Group)
dat$Subject <- as.factor(dat$Subject)
abr <- dat[1:9] %>% pivot_longer(cols = 5:9, names_to = "freq", values_to = "threshold" )
abr$freq <- factor(abr$freq, labels=c("500", "1000", "2000", "4000", "8000"))
p1 <- ggplot(data = abr %>% filter(Group=="TTS")) + aes(x = freq, y=threshold, color=Status) +
geom_boxplot()
p2 <- ggplot(data = abr %>% filter(Group=="CA")) + aes(x = freq, y=threshold, color=Status) +
geom_boxplot()
p1 / p2
